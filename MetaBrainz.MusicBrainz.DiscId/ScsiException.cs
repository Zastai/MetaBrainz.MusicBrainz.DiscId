using System;
using System.Runtime.InteropServices;
using System.Text;

namespace MetaBrainz.MusicBrainz.DiscId.Platforms {

  /// <summary>Exception thrown for a SCSI-related error (based on the sense key as well as the ASC/ASCQ values).</summary>
  [Serializable]
  public class ScsiException : ExternalException {

    /// <summary>Creates a new <see cref="ScsiException"/> instance for the specified SCSI sense information.</summary>
    /// <param name="senseKey">The SCSI &quot;sense key&quot; value.</param>
    /// <param name="asc">The SCSI &quot;additional sense code&quot; value.</param>
    /// <param name="ascq">The SCSI &quot;additional sense code qualifier&quot; value.</param>
    public ScsiException(byte senseKey, byte asc, byte ascq) : base(ScsiException.FormatMessage(senseKey, asc, ascq)) { }

    /// <summary>Formats a message describing the specified SCSI sense information.</summary>
    /// <param name="senseKey">The SCSI &quot;sense key&quot; value.</param>
    /// <param name="asc">The SCSI &quot;additional sense code&quot; value.</param>
    /// <param name="ascq">The SCSI &quot;additional sense code qualifier&quot; value.</param>
    /// <returns>A message of the format &quot;<em>sense key description</em> / <em>additional description</em>&quot;.</returns>
    public static string FormatMessage(byte senseKey, byte asc, byte ascq) {
      var sb = new StringBuilder();
      switch (senseKey) {
        case 0x0: sb.Append("NO SENSE");        break;
        case 0x1: sb.Append("RECOVERED ERROR"); break;
        case 0x2: sb.Append("NOT READY");       break;
        case 0x3: sb.Append("MEDIUM ERROR");    break;
        case 0x4: sb.Append("HARDWARE ERROR");  break;
        case 0x5: sb.Append("ILLEGAL REQUEST"); break;
        case 0x6: sb.Append("UNIT ATTENTION");  break;
        case 0x7: sb.Append("DATA PROTECT");    break;
        case 0x8: sb.Append("BLANK CHECK");     break;
        case 0x9: sb.Append("VENDOR SPECIFIC"); break;
        case 0xa: sb.Append("COPY ABORTED");    break;
        case 0xb: sb.Append("ABORTED COMMAND"); break;
        case 0xc: sb.Append("RESERVED");        break;
        case 0xd: sb.Append("VOLUME OVERFLOW"); break;
        case 0xe: sb.Append("NO SENSE");        break;
        case 0xf: sb.Append("COMPLETED");       break;
      }
      sb.Append(" / ");
      switch ((ushort) (asc << 8 | ascq)) {
        case 0x0000: sb.Append("NO ADDITIONAL SENSE INFORMATION"); break;
        case 0x0001: sb.Append("FILEMARK DETECTED"); break;
        case 0x0002: sb.Append("END-OF-PARTITION/MEDIUM DETECTED"); break;
        case 0x0003: sb.Append("SETMARK DETECTED"); break;
        case 0x0004: sb.Append("BEGINNING-OF-PARTITION/MEDIUM DETECTED"); break;
        case 0x0005: sb.Append("END-OF-DATA DETECTED"); break;
        case 0x0006: sb.Append("I/O PROCESS TERMINATED"); break;
        case 0x0007: sb.Append("PROGRAMMABLE EARLY WARNING DETECTED"); break;
        case 0x0011: sb.Append("AUDIO PLAY OPERATION IN PROGRESS"); break;
        case 0x0012: sb.Append("AUDIO PLAY OPERATION PAUSED"); break;
        case 0x0013: sb.Append("AUDIO PLAY OPERATION SUCCESSFULLY COMPLETED"); break;
        case 0x0014: sb.Append("AUDIO PLAY OPERATION STOPPED DUE TO ERROR"); break;
        case 0x0015: sb.Append("NO CURRENT AUDIO STATUS TO RETURN"); break;
        case 0x0016: sb.Append("OPERATION IN PROGRESS"); break;
        case 0x0017: sb.Append("CLEANING REQUESTED"); break;
        case 0x0018: sb.Append("ERASE OPERATION IN PROGRESS"); break;
        case 0x0019: sb.Append("LOCATE OPERATION IN PROGRESS"); break;
        case 0x001A: sb.Append("REWIND OPERATION IN PROGRESS"); break;
        case 0x001B: sb.Append("SET CAPACITY OPERATION IN PROGRESS"); break;
        case 0x001C: sb.Append("VERIFY OPERATION IN PROGRESS"); break;
        case 0x001D: sb.Append("ATA PASS THROUGH INFORMATION AVAILABLE"); break;
        case 0x001E: sb.Append("CONFLICTING SA CREATION REQUEST"); break;
        case 0x001F: sb.Append("LOGICAL UNIT TRANSITIONING TO ANOTHER POWER CONDITION"); break;
        case 0x0020: sb.Append("EXTENDED COPY INFORMATION AVAILABLE"); break;
        case 0x0021: sb.Append("ATOMIC COMMAND ABORTED DUE TO ACA"); break;
        case 0x0100: sb.Append("NO INDEX/SECTOR SIGNAL"); break;
        case 0x0200: sb.Append("NO SEEK COMPLETE"); break;
        case 0x0300: sb.Append("PERIPHERAL DEVICE WRITE FAULT"); break;
        case 0x0301: sb.Append("NO WRITE CURRENT"); break;
        case 0x0302: sb.Append("EXCESSIVE WRITE ERRORS"); break;
        case 0x0400: sb.Append("LOGICAL UNIT NOT READY, CAUSE NOT REPORTABLE"); break;
        case 0x0401: sb.Append("LOGICAL UNIT IS IN PROCESS OF BECOMING READY"); break;
        case 0x0402: sb.Append("LOGICAL UNIT NOT READY, INITIALIZING COMMAND REQUIRED"); break;
        case 0x0403: sb.Append("LOGICAL UNIT NOT READY, MANUAL INTERVENTION REQUIRED"); break;
        case 0x0404: sb.Append("LOGICAL UNIT NOT READY, FORMAT IN PROGRESS"); break;
        case 0x0405: sb.Append("LOGICAL UNIT NOT READY, REBUILD IN PROGRESS"); break;
        case 0x0406: sb.Append("LOGICAL UNIT NOT READY, RECALCULATION IN PROGRESS"); break;
        case 0x0407: sb.Append("LOGICAL UNIT NOT READY, OPERATION IN PROGRESS"); break;
        case 0x0408: sb.Append("LOGICAL UNIT NOT READY, LONG WRITE IN PROGRESS"); break;
        case 0x0409: sb.Append("LOGICAL UNIT NOT READY, SELF-TEST IN PROGRESS"); break;
        case 0x040A: sb.Append("LOGICAL UNIT NOT ACCESSIBLE, ASYMMETRIC ACCESS STATE TRANSITION"); break;
        case 0x040B: sb.Append("LOGICAL UNIT NOT ACCESSIBLE, TARGET PORT IN STANDBY STATE"); break;
        case 0x040C: sb.Append("LOGICAL UNIT NOT ACCESSIBLE, TARGET PORT IN UNAVAILABLE STATE"); break;
        case 0x040D: sb.Append("LOGICAL UNIT NOT READY, STRUCTURE CHECK REQUIRED"); break;
        case 0x040E: sb.Append("LOGICAL UNIT NOT READY, SECURITY SESSION IN PROGRESS"); break;
        case 0x0410: sb.Append("LOGICAL UNIT NOT READY, AUXILIARY MEMORY NOT ACCESSIBLE"); break;
        case 0x0411: sb.Append("LOGICAL UNIT NOT READY, NOTIFY (ENABLE SPINUP) REQUIRED"); break;
        case 0x0412: sb.Append("LOGICAL UNIT NOT READY, OFFLINE"); break;
        case 0x0413: sb.Append("LOGICAL UNIT NOT READY, SA CREATION IN PROGRESS"); break;
        case 0x0414: sb.Append("LOGICAL UNIT NOT READY, SPACE ALLOCATION IN PROGRESS"); break;
        case 0x0415: sb.Append("LOGICAL UNIT NOT READY, ROBOTICS DISABLED"); break;
        case 0x0416: sb.Append("LOGICAL UNIT NOT READY, CONFIGURATION REQUIRED"); break;
        case 0x0417: sb.Append("LOGICAL UNIT NOT READY, CALIBRATION REQUIRED"); break;
        case 0x0418: sb.Append("LOGICAL UNIT NOT READY, A DOOR IS OPEN"); break;
        case 0x0419: sb.Append("LOGICAL UNIT NOT READY, OPERATING IN SEQUENTIAL MODE"); break;
        case 0x041A: sb.Append("LOGICAL UNIT NOT READY, START STOP UNIT COMMAND IN PROGRESS"); break;
        case 0x041B: sb.Append("LOGICAL UNIT NOT READY, SANITIZE IN PROGRESS"); break;
        case 0x041C: sb.Append("LOGICAL UNIT NOT READY, ADDITIONAL POWER USE NOT YET GRANTED"); break;
        case 0x041D: sb.Append("LOGICAL UNIT NOT READY, CONFIGURATION IN PROGRESS"); break;
        case 0x041E: sb.Append("LOGICAL UNIT NOT READY, MICROCODE ACTIVATION REQUIRED"); break;
        case 0x041F: sb.Append("LOGICAL UNIT NOT READY, MICROCODE DOWNLOAD REQUIRED"); break;
        case 0x0420: sb.Append("LOGICAL UNIT NOT READY, LOGICAL UNIT RESET REQUIRED"); break;
        case 0x0421: sb.Append("LOGICAL UNIT NOT READY, HARD RESET REQUIRED"); break;
        case 0x0422: sb.Append("LOGICAL UNIT NOT READY, POWER CYCLE REQUIRED"); break;
        case 0x0423: sb.Append("LOGICAL UNIT NOT READY, AFFILIATION REQUIRED"); break;
        case 0x0500: sb.Append("LOGICAL UNIT DOES NOT RESPOND TO SELECTION"); break;
        case 0x0600: sb.Append("NO REFERENCE POSITION FOUND"); break;
        case 0x0700: sb.Append("MULTIPLE PERIPHERAL DEVICES SELECTED"); break;
        case 0x0800: sb.Append("LOGICAL UNIT COMMUNICATION FAILURE"); break;
        case 0x0801: sb.Append("LOGICAL UNIT COMMUNICATION TIME-OUT"); break;
        case 0x0802: sb.Append("LOGICAL UNIT COMMUNICATION PARITY ERROR"); break;
        case 0x0803: sb.Append("LOGICAL UNIT COMMUNICATION CRC ERROR (ULTRA-DMA/32)"); break;
        case 0x0804: sb.Append("UNREACHABLE COPY TARGET"); break;
        case 0x0900: sb.Append("TRACK FOLLOWING ERROR"); break;
        case 0x0901: sb.Append("TRACKING SERVO FAILURE"); break;
        case 0x0902: sb.Append("FOCUS SERVO FAILURE"); break;
        case 0x0903: sb.Append("SPINDLE SERVO FAILURE"); break;
        case 0x0904: sb.Append("HEAD SELECT FAULT"); break;
        case 0x0905: sb.Append("VIBRATION INDUCED TRACKING ERROR"); break;
        case 0x0A00: sb.Append("ERROR LOG OVERFLOW"); break;
        case 0x0B00: sb.Append("WARNING"); break;
        case 0x0B01: sb.Append("WARNING - SPECIFIED TEMPERATURE EXCEEDED"); break;
        case 0x0B02: sb.Append("WARNING - ENCLOSURE DEGRADED"); break;
        case 0x0B03: sb.Append("WARNING - BACKGROUND SELF-TEST FAILED"); break;
        case 0x0B04: sb.Append("WARNING - BACKGROUND PRE-SCAN DETECTED MEDIUM ERROR"); break;
        case 0x0B05: sb.Append("WARNING - BACKGROUND MEDIUM SCAN DETECTED MEDIUM ERROR"); break;
        case 0x0B06: sb.Append("WARNING - NON-VOLATILE CACHE NOW VOLATILE"); break;
        case 0x0B07: sb.Append("WARNING - DEGRADED POWER TO NON-VOLATILE CACHE"); break;
        case 0x0B08: sb.Append("WARNING - POWER LOSS EXPECTED"); break;
        case 0x0B09: sb.Append("WARNING - DEVICE STATISTICS NOTIFICATION ACTIVE"); break;
        case 0x0B0A: sb.Append("WARNING - HIGH CRITICAL TEMPERATURE LIMIT EXCEEDED"); break;
        case 0x0B0B: sb.Append("WARNING - LOW CRITICAL TEMPERATURE LIMIT EXCEEDED"); break;
        case 0x0B0C: sb.Append("WARNING - HIGH OPERATING TEMPERATURE LIMIT EXCEEDED"); break;
        case 0x0B0D: sb.Append("WARNING - LOW OPERATING TEMPERATURE LIMIT EXCEEDED"); break;
        case 0x0B0E: sb.Append("WARNING - HIGH CRITICAL HUMIDITY LIMIT EXCEEDED"); break;
        case 0x0B0F: sb.Append("WARNING - LOW CRITICAL HUMIDITY LIMIT EXCEEDED"); break;
        case 0x0B10: sb.Append("WARNING - HIGH OPERATING HUMIDITY LIMIT EXCEEDED"); break;
        case 0x0B11: sb.Append("WARNING - LOW OPERATING HUMIDITY LIMIT EXCEEDED"); break;
        case 0x0C00: sb.Append("WRITE ERROR"); break;
        case 0x0C01: sb.Append("WRITE ERROR - RECOVERED WITH AUTO REALLOCATION"); break;
        case 0x0C02: sb.Append("WRITE ERROR - AUTO REALLOCATION FAILED"); break;
        case 0x0C03: sb.Append("WRITE ERROR - RECOMMEND REASSIGNMENT"); break;
        case 0x0C04: sb.Append("COMPRESSION CHECK MISCOMPARE ERROR"); break;
        case 0x0C05: sb.Append("DATA EXPANSION OCCURRED DURING COMPRESSION"); break;
        case 0x0C06: sb.Append("BLOCK NOT COMPRESSIBLE"); break;
        case 0x0C07: sb.Append("WRITE ERROR - RECOVERY NEEDED"); break;
        case 0x0C08: sb.Append("WRITE ERROR - RECOVERY FAILED"); break;
        case 0x0C09: sb.Append("WRITE ERROR - LOSS OF STREAMING"); break;
        case 0x0C0A: sb.Append("WRITE ERROR - PADDING BLOCKS ADDED"); break;
        case 0x0C0B: sb.Append("AUXILIARY MEMORY WRITE ERROR"); break;
        case 0x0C0C: sb.Append("WRITE ERROR - UNEXPECTED UNSOLICITED DATA"); break;
        case 0x0C0D: sb.Append("WRITE ERROR - NOT ENOUGH UNSOLICITED DATA"); break;
        case 0x0C0E: sb.Append("MULTIPLE WRITE ERRORS"); break;
        case 0x0C0F: sb.Append("DEFECTS IN ERROR WINDOW"); break;
        case 0x0C10: sb.Append("INCOMPLETE MULTIPLE ATOMIC WRITE OPERATIONS"); break;
        case 0x0C11: sb.Append("WRITE ERROR - RECOVERY SCAN NEEDED"); break;
        case 0x0C12: sb.Append("WRITE ERROR - INSUFFICIENT ZONE RESOURCES"); break;
        case 0x0D00: sb.Append("ERROR DETECTED BY THIRD PARTY TEMPORARY INITIATOR"); break;
        case 0x0D01: sb.Append("THIRD PARTY DEVICE FAILURE"); break;
        case 0x0D02: sb.Append("COPY TARGET DEVICE NOT REACHABLE"); break;
        case 0x0D03: sb.Append("INCORRECT COPY TARGET DEVICE TYPE"); break;
        case 0x0D04: sb.Append("COPY TARGET DEVICE DATA UNDERRUN"); break;
        case 0x0D05: sb.Append("COPY TARGET DEVICE DATA OVERRUN"); break;
        case 0x0E00: sb.Append("INVALID INFORMATION UNIT"); break;
        case 0x0E01: sb.Append("INFORMATION UNIT TOO SHORT"); break;
        case 0x0E02: sb.Append("INFORMATION UNIT TOO LONG"); break;
        case 0x0E03: sb.Append("INVALID FIELD IN COMMAND INFORMATION UNIT"); break;
        case 0x0F00: sb.Append("10h 00h ID CRC OR ECC ERROR"); break;
        case 0x1001: sb.Append("LOGICAL BLOCK GUARD CHECK FAILED"); break;
        case 0x1002: sb.Append("LOGICAL BLOCK APPLICATION TAG CHECK FAILED"); break;
        case 0x1003: sb.Append("LOGICAL BLOCK REFERENCE TAG CHECK FAILED"); break;
        case 0x1004: sb.Append("LOGICAL BLOCK PROTECTION ERROR ON RECOVER BUFFERED DATA"); break;
        case 0x1005: sb.Append("LOGICAL BLOCK PROTECTION METHOD ERROR"); break;
        case 0x1100: sb.Append("UNRECOVERED READ ERROR"); break;
        case 0x1101: sb.Append("READ RETRIES EXHAUSTED"); break;
        case 0x1102: sb.Append("ERROR TOO LONG TO CORRECT"); break;
        case 0x1103: sb.Append("MULTIPLE READ ERRORS"); break;
        case 0x1104: sb.Append("UNRECOVERED READ ERROR - AUTO REALLOCATE FAILED"); break;
        case 0x1105: sb.Append("L-EC UNCORRECTABLE ERROR"); break;
        case 0x1106: sb.Append("CIRC UNRECOVERED ERROR"); break;
        case 0x1107: sb.Append("DATA RE-SYNCHRONIZATION ERROR"); break;
        case 0x1108: sb.Append("INCOMPLETE BLOCK READ"); break;
        case 0x1109: sb.Append("NO GAP FOUND"); break;
        case 0x110A: sb.Append("MISCORRECTED ERROR"); break;
        case 0x110B: sb.Append("UNRECOVERED READ ERROR - RECOMMEND REASSIGNMENT"); break;
        case 0x110C: sb.Append("UNRECOVERED READ ERROR - RECOMMEND REWRITE THE DATA"); break;
        case 0x110D: sb.Append("DE-COMPRESSION CRC ERROR"); break;
        case 0x110E: sb.Append("CANNOT DECOMPRESS USING DECLARED ALGORITHM"); break;
        case 0x110F: sb.Append("ERROR READING UPC/EAN NUMBER"); break;
        case 0x1110: sb.Append("ERROR READING ISRC NUMBER"); break;
        case 0x1111: sb.Append("READ ERROR - LOSS OF STREAMING"); break;
        case 0x1112: sb.Append("AUXILIARY MEMORY READ ERROR"); break;
        case 0x1113: sb.Append("READ ERROR - FAILED RETRANSMISSION REQUEST"); break;
        case 0x1114: sb.Append("READ ERROR - LBA MARKED BAD BY APPLICATION CLIENT"); break;
        case 0x1115: sb.Append("WRITE AFTER SANITIZE REQUIRED"); break;
        case 0x1200: sb.Append("ADDRESS MARK NOT FOUND FOR ID FIELD"); break;
        case 0x1300: sb.Append("ADDRESS MARK NOT FOUND FOR DATA FIELD"); break;
        case 0x1400: sb.Append("RECORDED ENTITY NOT FOUND"); break;
        case 0x1401: sb.Append("RECORD NOT FOUND"); break;
        case 0x1402: sb.Append("FILEMARK OR SETMARK NOT FOUND"); break;
        case 0x1403: sb.Append("END-OF-DATA NOT FOUND"); break;
        case 0x1404: sb.Append("BLOCK SEQUENCE ERROR"); break;
        case 0x1405: sb.Append("RECORD NOT FOUND - RECOMMEND REASSIGNMENT"); break;
        case 0x1406: sb.Append("RECORD NOT FOUND - DATA AUTO-REALLOCATED"); break;
        case 0x1407: sb.Append("LOCATE OPERATION FAILURE"); break;
        case 0x1500: sb.Append("RANDOM POSITIONING ERROR"); break;
        case 0x1501: sb.Append("MECHANICAL POSITIONING ERROR"); break;
        case 0x1502: sb.Append("POSITIONING ERROR DETECTED BY READ OF MEDIUM"); break;
        case 0x1600: sb.Append("DATA SYNCHRONIZATION MARK ERROR"); break;
        case 0x1601: sb.Append("DATA SYNC ERROR - DATA REWRITTEN"); break;
        case 0x1602: sb.Append("DATA SYNC ERROR - RECOMMEND REWRITE"); break;
        case 0x1603: sb.Append("DATA SYNC ERROR - DATA AUTO-REALLOCATED"); break;
        case 0x1604: sb.Append("DATA SYNC ERROR - RECOMMEND REASSIGNMENT"); break;
        case 0x1700: sb.Append("RECOVERED DATA WITH NO ERROR CORRECTION APPLIED"); break;
        case 0x1701: sb.Append("RECOVERED DATA WITH RETRIES"); break;
        case 0x1702: sb.Append("RECOVERED DATA WITH POSITIVE HEAD OFFSET"); break;
        case 0x1703: sb.Append("RECOVERED DATA WITH NEGATIVE HEAD OFFSET"); break;
        case 0x1704: sb.Append("RECOVERED DATA WITH RETRIES AND/OR CIRC APPLIED"); break;
        case 0x1705: sb.Append("RECOVERED DATA USING PREVIOUS SECTOR ID"); break;
        case 0x1706: sb.Append("RECOVERED DATA WITHOUT ECC - DATA AUTO-REALLOCATED"); break;
        case 0x1707: sb.Append("RECOVERED DATA WITHOUT ECC - RECOMMEND REASSIGNMENT"); break;
        case 0x1708: sb.Append("RECOVERED DATA WITHOUT ECC - RECOMMEND REWRITE"); break;
        case 0x1709: sb.Append("RECOVERED DATA WITHOUT ECC - DATA REWRITTEN"); break;
        case 0x1800: sb.Append("RECOVERED DATA WITH ERROR CORRECTION APPLIED"); break;
        case 0x1801: sb.Append("RECOVERED DATA WITH ERROR CORR. & RETRIES APPLIED"); break;
        case 0x1802: sb.Append("RECOVERED DATA - DATA AUTO-REALLOCATED"); break;
        case 0x1803: sb.Append("RECOVERED DATA WITH CIRC"); break;
        case 0x1804: sb.Append("RECOVERED DATA WITH L-EC"); break;
        case 0x1805: sb.Append("RECOVERED DATA - RECOMMEND REASSIGNMENT"); break;
        case 0x1806: sb.Append("RECOVERED DATA - RECOMMEND REWRITE"); break;
        case 0x1807: sb.Append("RECOVERED DATA WITH ECC - DATA REWRITTEN"); break;
        case 0x1808: sb.Append("RECOVERED DATA WITH LINKING"); break;
        case 0x1900: sb.Append("DEFECT LIST ERROR"); break;
        case 0x1901: sb.Append("DEFECT LIST NOT AVAILABLE"); break;
        case 0x1902: sb.Append("DEFECT LIST ERROR IN PRIMARY LIST"); break;
        case 0x1903: sb.Append("DEFECT LIST ERROR IN GROWN LIST"); break;
        case 0x1A00: sb.Append("PARAMETER LIST LENGTH ERROR"); break;
        case 0x1B00: sb.Append("SYNCHRONOUS DATA TRANSFER ERROR"); break;
        case 0x1C00: sb.Append("DEFECT LIST NOT FOUND"); break;
        case 0x1C01: sb.Append("PRIMARY DEFECT LIST NOT FOUND"); break;
        case 0x1C02: sb.Append("GROWN DEFECT LIST NOT FOUND"); break;
        case 0x1D00: sb.Append("MISCOMPARE DURING VERIFY OPERATION"); break;
        case 0x1D01: sb.Append("MISCOMPARE VERIFY OF UNMAPPED LBA"); break;
        case 0x1E00: sb.Append("RECOVERED ID WITH ECC CORRECTION"); break;
        case 0x1F00: sb.Append("PARTIAL DEFECT LIST TRANSFER"); break;
        case 0x2000: sb.Append("INVALID COMMAND OPERATION CODE"); break;
        case 0x2001: sb.Append("ACCESS DENIED - INITIATOR PENDING-ENROLLED"); break;
        case 0x2002: sb.Append("ACCESS DENIED - NO ACCESS RIGHTS"); break;
        case 0x2003: sb.Append("ACCESS DENIED - INVALID MGMT ID KEY"); break;
        case 0x2004: sb.Append("ILLEGAL COMMAND WHILE IN WRITE CAPABLE STATE"); break;
        case 0x2005: sb.Append("Obsolete"); break;
        case 0x2006: sb.Append("ILLEGAL COMMAND WHILE IN EXPLICIT ADDRESS MODE"); break;
        case 0x2007: sb.Append("ILLEGAL COMMAND WHILE IN IMPLICIT ADDRESS MODE"); break;
        case 0x2008: sb.Append("ACCESS DENIED - ENROLLMENT CONFLICT"); break;
        case 0x2009: sb.Append("ACCESS DENIED - INVALID LU IDENTIFIER"); break;
        case 0x200A: sb.Append("ACCESS DENIED - INVALID PROXY TOKEN"); break;
        case 0x200B: sb.Append("ACCESS DENIED - ACL LUN CONFLICT"); break;
        case 0x200C: sb.Append("ILLEGAL COMMAND WHEN NOT IN APPEND-ONLY MODE"); break;
        case 0x200D: sb.Append("NOT AN ADMINISTRATIVE LOGICAL UNIT"); break;
        case 0x200E: sb.Append("NOT A SUBSIDIARY LOGICAL UNIT"); break;
        case 0x200F: sb.Append("NOT A CONGLOMERATE LOGICAL UNIT"); break;
        case 0x2100: sb.Append("LOGICAL BLOCK ADDRESS OUT OF RANGE"); break;
        case 0x2101: sb.Append("INVALID ELEMENT ADDRESS"); break;
        case 0x2102: sb.Append("INVALID ADDRESS FOR WRITE"); break;
        case 0x2103: sb.Append("INVALID WRITE CROSSING LAYER JUMP"); break;
        case 0x2104: sb.Append("UNALIGNED WRITE COMMAND"); break;
        case 0x2105: sb.Append("WRITE BOUNDARY VIOLATION"); break;
        case 0x2106: sb.Append("ATTEMPT TO READ INVALID DATA"); break;
        case 0x2107: sb.Append("READ BOUNDARY VIOLATION"); break;
        case 0x2108: sb.Append("MISALIGNED WRITE COMMAND"); break;
        case 0x2200: sb.Append("ILLEGAL FUNCTION (USE 20 00, 24 00, OR 26 00)"); break;
        case 0x2300: sb.Append("INVALID TOKEN OPERATION, CAUSE NOT REPORTABLE"); break;
        case 0x2301: sb.Append("INVALID TOKEN OPERATION, UNSUPPORTED TOKEN TYPE"); break;
        case 0x2302: sb.Append("INVALID TOKEN OPERATION, REMOTE TOKEN USAGE NOT SUPPORTED"); break;
        case 0x2303: sb.Append("INVALID TOKEN OPERATION, REMOTE ROD TOKEN CREATION NOT SUPPORTED"); break;
        case 0x2304: sb.Append("INVALID TOKEN OPERATION, TOKEN UNKNOWN"); break;
        case 0x2305: sb.Append("INVALID TOKEN OPERATION, TOKEN CORRUPT"); break;
        case 0x2306: sb.Append("INVALID TOKEN OPERATION, TOKEN REVOKED"); break;
        case 0x2307: sb.Append("INVALID TOKEN OPERATION, TOKEN EXPIRED"); break;
        case 0x2308: sb.Append("INVALID TOKEN OPERATION, TOKEN CANCELLED"); break;
        case 0x2309: sb.Append("INVALID TOKEN OPERATION, TOKEN DELETED"); break;
        case 0x230A: sb.Append("INVALID TOKEN OPERATION, INVALID TOKEN LENGTH"); break;
        case 0x2400: sb.Append("INVALID FIELD IN CDB"); break;
        case 0x2401: sb.Append("CDB DECRYPTION ERROR"); break;
        case 0x2402: sb.Append("Obsolete"); break;
        case 0x2403: sb.Append("Obsolete"); break;
        case 0x2404: sb.Append("SECURITY AUDIT VALUE FROZEN"); break;
        case 0x2405: sb.Append("SECURITY WORKING KEY FROZEN"); break;
        case 0x2406: sb.Append("NONCE NOT UNIQUE"); break;
        case 0x2407: sb.Append("NONCE TIMESTAMP OUT OF RANGE"); break;
        case 0x2408: sb.Append("INVALID XCDB"); break;
        case 0x2500: sb.Append("LOGICAL UNIT NOT SUPPORTED"); break;
        case 0x2600: sb.Append("INVALID FIELD IN PARAMETER LIST"); break;
        case 0x2601: sb.Append("PARAMETER NOT SUPPORTED"); break;
        case 0x2602: sb.Append("PARAMETER VALUE INVALID"); break;
        case 0x2603: sb.Append("THRESHOLD PARAMETERS NOT SUPPORTED"); break;
        case 0x2604: sb.Append("INVALID RELEASE OF PERSISTENT RESERVATION"); break;
        case 0x2605: sb.Append("DATA DECRYPTION ERROR"); break;
        case 0x2606: sb.Append("TOO MANY TARGET DESCRIPTORS"); break;
        case 0x2607: sb.Append("UNSUPPORTED TARGET DESCRIPTOR TYPE CODE"); break;
        case 0x2608: sb.Append("TOO MANY SEGMENT DESCRIPTORS"); break;
        case 0x2609: sb.Append("UNSUPPORTED SEGMENT DESCRIPTOR TYPE CODE"); break;
        case 0x260A: sb.Append("UNEXPECTED INEXACT SEGMENT"); break;
        case 0x260B: sb.Append("INLINE DATA LENGTH EXCEEDED"); break;
        case 0x260C: sb.Append("INVALID OPERATION FOR COPY SOURCE OR DESTINATION"); break;
        case 0x260D: sb.Append("COPY SEGMENT GRANULARITY VIOLATION"); break;
        case 0x260E: sb.Append("INVALID PARAMETER WHILE PORT IS ENABLED"); break;
        case 0x260F: sb.Append("INVALID DATA-OUT BUFFER INTEGRITY CHECK VALUE"); break;
        case 0x2610: sb.Append("DATA DECRYPTION KEY FAIL LIMIT REACHED"); break;
        case 0x2611: sb.Append("INCOMPLETE KEY-ASSOCIATED DATA SET"); break;
        case 0x2612: sb.Append("VENDOR SPECIFIC KEY REFERENCE NOT FOUND"); break;
        case 0x2613: sb.Append("APPLICATION TAG MODE PAGE IS INVALID"); break;
        case 0x2700: sb.Append("WRITE PROTECTED"); break;
        case 0x2701: sb.Append("HARDWARE WRITE PROTECTED"); break;
        case 0x2702: sb.Append("LOGICAL UNIT SOFTWARE WRITE PROTECTED"); break;
        case 0x2703: sb.Append("ASSOCIATED WRITE PROTECT"); break;
        case 0x2704: sb.Append("PERSISTENT WRITE PROTECT"); break;
        case 0x2705: sb.Append("PERMANENT WRITE PROTECT"); break;
        case 0x2706: sb.Append("CONDITIONAL WRITE PROTECT"); break;
        case 0x2707: sb.Append("SPACE ALLOCATION FAILED WRITE PROTECT"); break;
        case 0x2708: sb.Append("ZONE IS READ ONLY"); break;
        case 0x2800: sb.Append("NOT READY TO READY CHANGE, MEDIUM MAY HAVE CHANGED"); break;
        case 0x2801: sb.Append("IMPORT OR EXPORT ELEMENT ACCESSED"); break;
        case 0x2802: sb.Append("FORMAT-LAYER MAY HAVE CHANGED"); break;
        case 0x2803: sb.Append("IMPORT/EXPORT ELEMENT ACCESSED, MEDIUM CHANGED"); break;
        case 0x2900: sb.Append("POWER ON, RESET, OR BUS DEVICE RESET OCCURRED"); break;
        case 0x2901: sb.Append("POWER ON OCCURRED"); break;
        case 0x2902: sb.Append("SCSI BUS RESET OCCURRED"); break;
        case 0x2903: sb.Append("BUS DEVICE RESET FUNCTION OCCURRED"); break;
        case 0x2904: sb.Append("DEVICE INTERNAL RESET"); break;
        case 0x2905: sb.Append("TRANSCEIVER MODE CHANGED TO SINGLE-ENDED"); break;
        case 0x2906: sb.Append("TRANSCEIVER MODE CHANGED TO LVD"); break;
        case 0x2907: sb.Append("I_T NEXUS LOSS OCCURRED"); break;
        case 0x2A00: sb.Append("PARAMETERS CHANGED"); break;
        case 0x2A01: sb.Append("MODE PARAMETERS CHANGED"); break;
        case 0x2A02: sb.Append("LOG PARAMETERS CHANGED"); break;
        case 0x2A03: sb.Append("RESERVATIONS PREEMPTED"); break;
        case 0x2A04: sb.Append("RESERVATIONS RELEASED"); break;
        case 0x2A05: sb.Append("REGISTRATIONS PREEMPTED"); break;
        case 0x2A06: sb.Append("ASYMMETRIC ACCESS STATE CHANGED"); break;
        case 0x2A07: sb.Append("IMPLICIT ASYMMETRIC ACCESS STATE TRANSITION FAILED"); break;
        case 0x2A08: sb.Append("PRIORITY CHANGED"); break;
        case 0x2A09: sb.Append("CAPACITY DATA HAS CHANGED"); break;
        case 0x2A0A: sb.Append("ERROR HISTORY I_T NEXUS CLEARED"); break;
        case 0x2A0B: sb.Append("ERROR HISTORY SNAPSHOT RELEASED"); break;
        case 0x2A0C: sb.Append("ERROR RECOVERY ATTRIBUTES HAVE CHANGED"); break;
        case 0x2A0D: sb.Append("DATA ENCRYPTION CAPABILITIES CHANGED"); break;
        case 0x2A10: sb.Append("TIMESTAMP CHANGED"); break;
        case 0x2A11: sb.Append("DATA ENCRYPTION PARAMETERS CHANGED BY ANOTHER I_T NEXUS"); break;
        case 0x2A12: sb.Append("DATA ENCRYPTION PARAMETERS CHANGED BY VENDOR SPECIFIC EVENT"); break;
        case 0x2A13: sb.Append("DATA ENCRYPTION KEY INSTANCE COUNTER HAS CHANGED"); break;
        case 0x2A14: sb.Append("SA CREATION CAPABILITIES DATA HAS CHANGED"); break;
        case 0x2A15: sb.Append("MEDIUM REMOVAL PREVENTION PREEMPTED"); break;
        case 0x2A16: sb.Append("ZONE RESET WRITE POINTER RECOMMENDED"); break;
        case 0x2B00: sb.Append("COPY CANNOT EXECUTE SINCE HOST CANNOT DISCONNECT"); break;
        case 0x2C00: sb.Append("COMMAND SEQUENCE ERROR"); break;
        case 0x2C01: sb.Append("TOO MANY WINDOWS SPECIFIED"); break;
        case 0x2C02: sb.Append("INVALID COMBINATION OF WINDOWS SPECIFIED"); break;
        case 0x2C03: sb.Append("CURRENT PROGRAM AREA IS NOT EMPTY"); break;
        case 0x2C04: sb.Append("CURRENT PROGRAM AREA IS EMPTY"); break;
        case 0x2C05: sb.Append("ILLEGAL POWER CONDITION REQUEST"); break;
        case 0x2C06: sb.Append("PERSISTENT PREVENT CONFLICT"); break;
        case 0x2C07: sb.Append("PREVIOUS BUSY STATUS"); break;
        case 0x2C08: sb.Append("PREVIOUS TASK SET FULL STATUS"); break;
        case 0x2C09: sb.Append("PREVIOUS RESERVATION CONFLICT STATUS"); break;
        case 0x2C0A: sb.Append("PARTITION OR COLLECTION CONTAINS USER OBJECTS"); break;
        case 0x2C0B: sb.Append("NOT RESERVED"); break;
        case 0x2C0C: sb.Append("ORWRITE GENERATION DOES NOT MATCH"); break;
        case 0x2C0D: sb.Append("RESET WRITE POINTER NOT ALLOWED"); break;
        case 0x2C0E: sb.Append("ZONE IS OFFLINE"); break;
        case 0x2C0F: sb.Append("STREAM NOT OPEN"); break;
        case 0x2C10: sb.Append("UNWRITTEN DATA IN ZONE"); break;
        case 0x2C11: sb.Append("DESCRIPTOR FORMAT SENSE DATA REQUIRED"); break;
        case 0x2D00: sb.Append("OVERWRITE ERROR ON UPDATE IN PLACE"); break;
        case 0x2E00: sb.Append("INSUFFICIENT TIME FOR OPERATION"); break;
        case 0x2E01: sb.Append("COMMAND TIMEOUT BEFORE PROCESSING"); break;
        case 0x2E02: sb.Append("COMMAND TIMEOUT DURING PROCESSING"); break;
        case 0x2E03: sb.Append("COMMAND TIMEOUT DURING PROCESSING DUE TO ERROR RECOVERY"); break;
        case 0x2F00: sb.Append("COMMANDS CLEARED BY ANOTHER INITIATOR"); break;
        case 0x2F01: sb.Append("COMMANDS CLEARED BY POWER LOSS NOTIFICATION"); break;
        case 0x2F02: sb.Append("COMMANDS CLEARED BY DEVICE SERVER"); break;
        case 0x2F03: sb.Append("SOME COMMANDS CLEARED BY QUEUING LAYER EVENT"); break;
        case 0x3000: sb.Append("INCOMPATIBLE MEDIUM INSTALLED"); break;
        case 0x3001: sb.Append("CANNOT READ MEDIUM - UNKNOWN FORMAT"); break;
        case 0x3002: sb.Append("CANNOT READ MEDIUM - INCOMPATIBLE FORMAT"); break;
        case 0x3003: sb.Append("CLEANING CARTRIDGE INSTALLED"); break;
        case 0x3004: sb.Append("CANNOT WRITE MEDIUM - UNKNOWN FORMAT"); break;
        case 0x3005: sb.Append("CANNOT WRITE MEDIUM - INCOMPATIBLE FORMAT"); break;
        case 0x3006: sb.Append("CANNOT FORMAT MEDIUM - INCOMPATIBLE MEDIUM"); break;
        case 0x3007: sb.Append("CLEANING FAILURE"); break;
        case 0x3008: sb.Append("CANNOT WRITE - APPLICATION CODE MISMATCH"); break;
        case 0x3009: sb.Append("CURRENT SESSION NOT FIXATED FOR APPEND"); break;
        case 0x300A: sb.Append("CLEANING REQUEST REJECTED"); break;
        case 0x300C: sb.Append("WORM MEDIUM - OVERWRITE ATTEMPTED"); break;
        case 0x300D: sb.Append("WORM MEDIUM - INTEGRITY CHECK"); break;
        case 0x3010: sb.Append("MEDIUM NOT FORMATTED"); break;
        case 0x3011: sb.Append("INCOMPATIBLE VOLUME TYPE"); break;
        case 0x3012: sb.Append("INCOMPATIBLE VOLUME QUALIFIER"); break;
        case 0x3013: sb.Append("CLEANING VOLUME EXPIRED"); break;
        case 0x3100: sb.Append("MEDIUM FORMAT CORRUPTED"); break;
        case 0x3101: sb.Append("FORMAT COMMAND FAILED"); break;
        case 0x3102: sb.Append("ZONED FORMATTING FAILED DUE TO SPARE LINKING"); break;
        case 0x3103: sb.Append("SANITIZE COMMAND FAILED"); break;
        case 0x3200: sb.Append("NO DEFECT SPARE LOCATION AVAILABLE"); break;
        case 0x3201: sb.Append("DEFECT LIST UPDATE FAILURE"); break;
        case 0x3300: sb.Append("TAPE LENGTH ERROR"); break;
        case 0x3400: sb.Append("ENCLOSURE FAILURE"); break;
        case 0x3500: sb.Append("ENCLOSURE SERVICES FAILURE"); break;
        case 0x3501: sb.Append("UNSUPPORTED ENCLOSURE FUNCTION"); break;
        case 0x3502: sb.Append("ENCLOSURE SERVICES UNAVAILABLE"); break;
        case 0x3503: sb.Append("ENCLOSURE SERVICES TRANSFER FAILURE"); break;
        case 0x3504: sb.Append("ENCLOSURE SERVICES TRANSFER REFUSED"); break;
        case 0x3505: sb.Append("ENCLOSURE SERVICES CHECKSUM ERROR"); break;
        case 0x3600: sb.Append("RIBBON, INK, OR TONER FAILURE"); break;
        case 0x3700: sb.Append("ROUNDED PARAMETER"); break;
        case 0x3800: sb.Append("EVENT STATUS NOTIFICATION"); break;
        case 0x3802: sb.Append("ESN - POWER MANAGEMENT CLASS EVENT"); break;
        case 0x3804: sb.Append("ESN - MEDIA CLASS EVENT"); break;
        case 0x3806: sb.Append("ESN - DEVICE BUSY CLASS EVENT"); break;
        case 0x3807: sb.Append("THIN PROVISIONING SOFT THRESHOLD REACHED"); break;
        case 0x3900: sb.Append("SAVING PARAMETERS NOT SUPPORTED"); break;
        case 0x3A00: sb.Append("MEDIUM NOT PRESENT"); break;
        case 0x3A01: sb.Append("MEDIUM NOT PRESENT - TRAY CLOSED"); break;
        case 0x3A02: sb.Append("MEDIUM NOT PRESENT - TRAY OPEN"); break;
        case 0x3A03: sb.Append("MEDIUM NOT PRESENT - LOADABLE"); break;
        case 0x3A04: sb.Append("MEDIUM NOT PRESENT - MEDIUM AUXILIARY MEMORY ACCESSIBLE"); break;
        case 0x3B00: sb.Append("SEQUENTIAL POSITIONING ERROR"); break;
        case 0x3B01: sb.Append("TAPE POSITION ERROR AT BEGINNING-OF-MEDIUM"); break;
        case 0x3B02: sb.Append("TAPE POSITION ERROR AT END-OF-MEDIUM"); break;
        case 0x3B03: sb.Append("TAPE OR ELECTRONIC VERTICAL FORMS UNIT NOT READY"); break;
        case 0x3B04: sb.Append("SLEW FAILURE"); break;
        case 0x3B05: sb.Append("PAPER JAM"); break;
        case 0x3B06: sb.Append("FAILED TO SENSE TOP-OF-FORM"); break;
        case 0x3B07: sb.Append("FAILED TO SENSE BOTTOM-OF-FORM"); break;
        case 0x3B08: sb.Append("REPOSITION ERROR"); break;
        case 0x3B09: sb.Append("READ PAST END OF MEDIUM"); break;
        case 0x3B0A: sb.Append("READ PAST BEGINNING OF MEDIUM"); break;
        case 0x3B0B: sb.Append("POSITION PAST END OF MEDIUM"); break;
        case 0x3B0C: sb.Append("POSITION PAST BEGINNING OF MEDIUM"); break;
        case 0x3B0D: sb.Append("MEDIUM DESTINATION ELEMENT FULL"); break;
        case 0x3B0E: sb.Append("MEDIUM SOURCE ELEMENT EMPTY"); break;
        case 0x3B0F: sb.Append("END OF MEDIUM REACHED"); break;
        case 0x3B11: sb.Append("MEDIUM MAGAZINE NOT ACCESSIBLE"); break;
        case 0x3B12: sb.Append("MEDIUM MAGAZINE REMOVED"); break;
        case 0x3B13: sb.Append("MEDIUM MAGAZINE INSERTED"); break;
        case 0x3B14: sb.Append("MEDIUM MAGAZINE LOCKED"); break;
        case 0x3B15: sb.Append("MEDIUM MAGAZINE UNLOCKED"); break;
        case 0x3B16: sb.Append("MECHANICAL POSITIONING OR CHANGER ERROR"); break;
        case 0x3B17: sb.Append("READ PAST END OF USER OBJECT"); break;
        case 0x3B18: sb.Append("ELEMENT DISABLED"); break;
        case 0x3B19: sb.Append("ELEMENT ENABLED"); break;
        case 0x3B1A: sb.Append("DATA TRANSFER DEVICE REMOVED"); break;
        case 0x3B1B: sb.Append("DATA TRANSFER DEVICE INSERTED"); break;
        case 0x3B1C: sb.Append("TOO MANY LOGICAL OBJECTS ON PARTITION TO SUPPORT OPERATION"); break;
        case 0x3C00: sb.Append("3Dh 00h INVALID BITS IN IDENTIFY MESSAGE"); break;
        case 0x3E00: sb.Append("LOGICAL UNIT HAS NOT SELF-CONFIGURED YET"); break;
        case 0x3E01: sb.Append("LOGICAL UNIT FAILURE"); break;
        case 0x3E02: sb.Append("TIMEOUT ON LOGICAL UNIT"); break;
        case 0x3E03: sb.Append("LOGICAL UNIT FAILED SELF-TEST"); break;
        case 0x3E04: sb.Append("LOGICAL UNIT UNABLE TO UPDATE SELF-TEST LOG"); break;
        case 0x3F00: sb.Append("TARGET OPERATING CONDITIONS HAVE CHANGED"); break;
        case 0x3F01: sb.Append("MICROCODE HAS BEEN CHANGED"); break;
        case 0x3F02: sb.Append("CHANGED OPERATING DEFINITION"); break;
        case 0x3F03: sb.Append("INQUIRY DATA HAS CHANGED"); break;
        case 0x3F04: sb.Append("COMPONENT DEVICE ATTACHED"); break;
        case 0x3F05: sb.Append("DEVICE IDENTIFIER CHANGED"); break;
        case 0x3F06: sb.Append("REDUNDANCY GROUP CREATED OR MODIFIED"); break;
        case 0x3F07: sb.Append("REDUNDANCY GROUP DELETED"); break;
        case 0x3F08: sb.Append("SPARE CREATED OR MODIFIED"); break;
        case 0x3F09: sb.Append("SPARE DELETED"); break;
        case 0x3F0A: sb.Append("VOLUME SET CREATED OR MODIFIED"); break;
        case 0x3F0B: sb.Append("VOLUME SET DELETED"); break;
        case 0x3F0C: sb.Append("VOLUME SET DEASSIGNED"); break;
        case 0x3F0D: sb.Append("VOLUME SET REASSIGNED"); break;
        case 0x3F0E: sb.Append("REPORTED LUNS DATA HAS CHANGED"); break;
        case 0x3F0F: sb.Append("ECHO BUFFER OVERWRITTEN"); break;
        case 0x3F10: sb.Append("MEDIUM LOADABLE"); break;
        case 0x3F11: sb.Append("MEDIUM AUXILIARY MEMORY ACCESSIBLE"); break;
        case 0x3F12: sb.Append("iSCSI IP ADDRESS ADDED"); break;
        case 0x3F13: sb.Append("iSCSI IP ADDRESS REMOVED"); break;
        case 0x3F14: sb.Append("iSCSI IP ADDRESS CHANGED"); break;
        case 0x3F15: sb.Append("INSPECT REFERRALS SENSE DESCRIPTORS"); break;
        case 0x3F16: sb.Append("MICROCODE HAS BEEN CHANGED WITHOUT RESET"); break;
        case 0x3F17: sb.Append("ZONE TRANSITION TO FULL"); break;
        case 0x3F18: sb.Append("BIND COMPLETED"); break;
        case 0x3F19: sb.Append("BIND REDIRECTED"); break;
        case 0x3F1A: sb.Append("SUBSIDIARY BINDING CHANGED"); break;
        case 0x4000: sb.Append("RAM FAILURE (SHOULD USE 40 NN)"); break;
        case 0x4100: sb.Append("DATA PATH FAILURE (SHOULD USE 40 NN)"); break;
        case 0x4200: sb.Append("POWER-ON OR SELF-TEST FAILURE (SHOULD USE 40 NN)"); break;
        case 0x4300: sb.Append("MESSAGE ERROR"); break;
        case 0x4400: sb.Append("INTERNAL TARGET FAILURE"); break;
        case 0x4401: sb.Append("PERSISTENT RESERVATION INFORMATION LOST"); break;
        case 0x4471: sb.Append("ATA DEVICE FAILED SET FEATURES"); break;
        case 0x4500: sb.Append("SELECT OR RESELECT FAILURE"); break;
        case 0x4600: sb.Append("UNSUCCESSFUL SOFT RESET"); break;
        case 0x4700: sb.Append("SCSI PARITY ERROR"); break;
        case 0x4701: sb.Append("DATA PHASE CRC ERROR DETECTED"); break;
        case 0x4702: sb.Append("SCSI PARITY ERROR DETECTED DURING ST DATA PHASE"); break;
        case 0x4703: sb.Append("INFORMATION UNIT iuCRC ERROR DETECTED"); break;
        case 0x4704: sb.Append("ASYNCHRONOUS INFORMATION PROTECTION ERROR DETECTED"); break;
        case 0x4705: sb.Append("PROTOCOL SERVICE CRC ERROR"); break;
        case 0x4706: sb.Append("PHY TEST FUNCTION IN PROGRESS"); break;
        case 0x477F: sb.Append("SOME COMMANDS CLEARED BY ISCSI PROTOCOL EVENT"); break;
        case 0x4800: sb.Append("INITIATOR DETECTED ERROR MESSAGE RECEIVED"); break;
        case 0x4900: sb.Append("INVALID MESSAGE ERROR"); break;
        case 0x4A00: sb.Append("COMMAND PHASE ERROR"); break;
        case 0x4B00: sb.Append("DATA PHASE ERROR"); break;
        case 0x4B01: sb.Append("INVALID TARGET PORT TRANSFER TAG RECEIVED"); break;
        case 0x4B02: sb.Append("TOO MUCH WRITE DATA"); break;
        case 0x4B03: sb.Append("ACK/NAK TIMEOUT"); break;
        case 0x4B04: sb.Append("NAK RECEIVED"); break;
        case 0x4B05: sb.Append("DATA OFFSET ERROR"); break;
        case 0x4B06: sb.Append("INITIATOR RESPONSE TIMEOUT"); break;
        case 0x4B07: sb.Append("CONNECTION LOST"); break;
        case 0x4B08: sb.Append("DATA-IN BUFFER OVERFLOW - DATA BUFFER SIZE"); break;
        case 0x4B09: sb.Append("DATA-IN BUFFER OVERFLOW - DATA BUFFER DESCRIPTOR AREA"); break;
        case 0x4B0A: sb.Append("DATA-IN BUFFER ERROR"); break;
        case 0x4B0B: sb.Append("DATA-OUT BUFFER OVERFLOW - DATA BUFFER SIZE"); break;
        case 0x4B0C: sb.Append("DATA-OUT BUFFER OVERFLOW - DATA BUFFER DESCRIPTOR AREA"); break;
        case 0x4B0D: sb.Append("DATA-OUT BUFFER ERROR"); break;
        case 0x4B0E: sb.Append("PCIE FABRIC ERROR"); break;
        case 0x4B0F: sb.Append("PCIE COMPLETION TIMEOUT"); break;
        case 0x4B10: sb.Append("PCIE COMPLETER ABORT"); break;
        case 0x4B11: sb.Append("PCIE POISONED TLP RECEIVED"); break;
        case 0x4B12: sb.Append("PCIE ECRC CHECK FAILED"); break;
        case 0x4B13: sb.Append("PCIE UNSUPPORTED REQUEST"); break;
        case 0x4B14: sb.Append("PCIE ACS VIOLATION"); break;
        case 0x4B15: sb.Append("PCIE TLP PREFIX BLOCKED"); break;
        case 0x4C00: sb.Append("LOGICAL UNIT FAILED SELF-CONFIGURATION"); break;
        case 0x4E00: sb.Append("OVERLAPPED COMMANDS ATTEMPTED"); break;
        case 0x4F00: sb.Append("50h 00h WRITE APPEND ERROR"); break;
        case 0x5001: sb.Append("WRITE APPEND POSITION ERROR"); break;
        case 0x5002: sb.Append("POSITION ERROR RELATED TO TIMING"); break;
        case 0x5100: sb.Append("ERASE FAILURE"); break;
        case 0x5101: sb.Append("ERASE FAILURE - INCOMPLETE ERASE OPERATION DETECTED"); break;
        case 0x5200: sb.Append("CARTRIDGE FAULT"); break;
        case 0x5300: sb.Append("MEDIA LOAD OR EJECT FAILED"); break;
        case 0x5301: sb.Append("UNLOAD TAPE FAILURE"); break;
        case 0x5302: sb.Append("MEDIUM REMOVAL PREVENTED"); break;
        case 0x5303: sb.Append("MEDIUM REMOVAL PREVENTED BY DATA TRANSFER ELEMENT"); break;
        case 0x5304: sb.Append("MEDIUM THREAD OR UNTHREAD FAILURE"); break;
        case 0x5305: sb.Append("VOLUME IDENTIFIER INVALID"); break;
        case 0x5306: sb.Append("VOLUME IDENTIFIER MISSING"); break;
        case 0x5307: sb.Append("DUPLICATE VOLUME IDENTIFIER"); break;
        case 0x5308: sb.Append("ELEMENT STATUS UNKNOWN"); break;
        case 0x5309: sb.Append("DATA TRANSFER DEVICE ERROR - LOAD FAILED"); break;
        case 0x530A: sb.Append("DATA TRANSFER DEVICE ERROR - UNLOAD FAILED"); break;
        case 0x530B: sb.Append("DATA TRANSFER DEVICE ERROR - UNLOAD MISSING"); break;
        case 0x530C: sb.Append("DATA TRANSFER DEVICE ERROR - EJECT FAILED"); break;
        case 0x530D: sb.Append("DATA TRANSFER DEVICE ERROR - LIBRARY COMMUNICATION FAILED"); break;
        case 0x5400: sb.Append("SCSI TO HOST SYSTEM INTERFACE FAILURE"); break;
        case 0x5500: sb.Append("SYSTEM RESOURCE FAILURE"); break;
        case 0x5501: sb.Append("SYSTEM BUFFER FULL"); break;
        case 0x5502: sb.Append("INSUFFICIENT RESERVATION RESOURCES"); break;
        case 0x5503: sb.Append("INSUFFICIENT RESOURCES"); break;
        case 0x5504: sb.Append("INSUFFICIENT REGISTRATION RESOURCES"); break;
        case 0x5505: sb.Append("INSUFFICIENT ACCESS CONTROL RESOURCES"); break;
        case 0x5506: sb.Append("AUXILIARY MEMORY OUT OF SPACE"); break;
        case 0x5507: sb.Append("QUOTA ERROR"); break;
        case 0x5508: sb.Append("MAXIMUM NUMBER OF SUPPLEMENTAL DECRYPTION KEYS EXCEEDED"); break;
        case 0x5509: sb.Append("MEDIUM AUXILIARY MEMORY NOT ACCESSIBLE"); break;
        case 0x550A: sb.Append("DATA CURRENTLY UNAVAILABLE"); break;
        case 0x550B: sb.Append("INSUFFICIENT POWER FOR OPERATION"); break;
        case 0x550C: sb.Append("INSUFFICIENT RESOURCES TO CREATE ROD"); break;
        case 0x550D: sb.Append("INSUFFICIENT RESOURCES TO CREATE ROD TOKEN"); break;
        case 0x550E: sb.Append("INSUFFICIENT ZONE RESOURCES"); break;
        case 0x550F: sb.Append("INSUFFICIENT ZONE RESOURCES TO COMPLETE WRITE"); break;
        case 0x5510: sb.Append("MAXIMUM NUMBER OF STREAMS OPEN"); break;
        case 0x5511: sb.Append("INSUFFICIENT RESOURCES TO BIND"); break;
        case 0x5600: sb.Append("57h 00h UNABLE TO RECOVER TABLE-OF-CONTENTS"); break;
        case 0x5800: sb.Append("GENERATION DOES NOT EXIST"); break;
        case 0x5900: sb.Append("UPDATED BLOCK READ"); break;
        case 0x5A00: sb.Append("OPERATOR REQUEST OR STATE CHANGE INPUT"); break;
        case 0x5A01: sb.Append("OPERATOR MEDIUM REMOVAL REQUEST"); break;
        case 0x5A02: sb.Append("OPERATOR SELECTED WRITE PROTECT"); break;
        case 0x5A03: sb.Append("OPERATOR SELECTED WRITE PERMIT"); break;
        case 0x5B00: sb.Append("LOG EXCEPTION"); break;
        case 0x5B01: sb.Append("THRESHOLD CONDITION MET"); break;
        case 0x5B02: sb.Append("LOG COUNTER AT MAXIMUM"); break;
        case 0x5B03: sb.Append("LOG LIST CODES EXHAUSTED"); break;
        case 0x5C00: sb.Append("RPL STATUS CHANGE"); break;
        case 0x5C01: sb.Append("SPINDLES SYNCHRONIZED"); break;
        case 0x5C02: sb.Append("SPINDLES NOT SYNCHRONIZED"); break;
        case 0x5D00: sb.Append("FAILURE PREDICTION THRESHOLD EXCEEDED"); break;
        case 0x5D01: sb.Append("MEDIA FAILURE PREDICTION THRESHOLD EXCEEDED"); break;
        case 0x5D02: sb.Append("LOGICAL UNIT FAILURE PREDICTION THRESHOLD EXCEEDED"); break;
        case 0x5D03: sb.Append("SPARE AREA EXHAUSTION PREDICTION THRESHOLD EXCEEDED"); break;
        case 0x5D10: sb.Append("HARDWARE IMPENDING FAILURE GENERAL HARD DRIVE FAILURE"); break;
        case 0x5D11: sb.Append("HARDWARE IMPENDING FAILURE DRIVE ERROR RATE TOO HIGH"); break;
        case 0x5D12: sb.Append("HARDWARE IMPENDING FAILURE DATA ERROR RATE TOO HIGH"); break;
        case 0x5D13: sb.Append("HARDWARE IMPENDING FAILURE SEEK ERROR RATE TOO HIGH"); break;
        case 0x5D14: sb.Append("HARDWARE IMPENDING FAILURE TOO MANY BLOCK REASSIGNS"); break;
        case 0x5D15: sb.Append("HARDWARE IMPENDING FAILURE ACCESS TIMES TOO HIGH"); break;
        case 0x5D16: sb.Append("HARDWARE IMPENDING FAILURE START UNIT TIMES TOO HIGH"); break;
        case 0x5D17: sb.Append("HARDWARE IMPENDING FAILURE CHANNEL PARAMETRICS"); break;
        case 0x5D18: sb.Append("HARDWARE IMPENDING FAILURE CONTROLLER DETECTED"); break;
        case 0x5D19: sb.Append("HARDWARE IMPENDING FAILURE THROUGHPUT PERFORMANCE"); break;
        case 0x5D1A: sb.Append("HARDWARE IMPENDING FAILURE SEEK TIME PERFORMANCE"); break;
        case 0x5D1B: sb.Append("HARDWARE IMPENDING FAILURE SPIN-UP RETRY COUNT"); break;
        case 0x5D1C: sb.Append("HARDWARE IMPENDING FAILURE DRIVE CALIBRATION RETRY COUNT"); break;
        case 0x5D20: sb.Append("CONTROLLER IMPENDING FAILURE GENERAL HARD DRIVE FAILURE"); break;
        case 0x5D21: sb.Append("CONTROLLER IMPENDING FAILURE DRIVE ERROR RATE TOO HIGH"); break;
        case 0x5D22: sb.Append("CONTROLLER IMPENDING FAILURE DATA ERROR RATE TOO HIGH"); break;
        case 0x5D23: sb.Append("CONTROLLER IMPENDING FAILURE SEEK ERROR RATE TOO HIGH"); break;
        case 0x5D24: sb.Append("CONTROLLER IMPENDING FAILURE TOO MANY BLOCK REASSIGNS"); break;
        case 0x5D25: sb.Append("CONTROLLER IMPENDING FAILURE ACCESS TIMES TOO HIGH"); break;
        case 0x5D26: sb.Append("CONTROLLER IMPENDING FAILURE START UNIT TIMES TOO HIGH"); break;
        case 0x5D27: sb.Append("CONTROLLER IMPENDING FAILURE CHANNEL PARAMETRICS"); break;
        case 0x5D28: sb.Append("CONTROLLER IMPENDING FAILURE CONTROLLER DETECTED"); break;
        case 0x5D29: sb.Append("CONTROLLER IMPENDING FAILURE THROUGHPUT PERFORMANCE"); break;
        case 0x5D2A: sb.Append("CONTROLLER IMPENDING FAILURE SEEK TIME PERFORMANCE"); break;
        case 0x5D2B: sb.Append("CONTROLLER IMPENDING FAILURE SPIN-UP RETRY COUNT"); break;
        case 0x5D2C: sb.Append("CONTROLLER IMPENDING FAILURE DRIVE CALIBRATION RETRY COUNT"); break;
        case 0x5D30: sb.Append("DATA CHANNEL IMPENDING FAILURE GENERAL HARD DRIVE FAILURE"); break;
        case 0x5D31: sb.Append("DATA CHANNEL IMPENDING FAILURE DRIVE ERROR RATE TOO HIGH"); break;
        case 0x5D32: sb.Append("DATA CHANNEL IMPENDING FAILURE DATA ERROR RATE TOO HIGH"); break;
        case 0x5D33: sb.Append("DATA CHANNEL IMPENDING FAILURE SEEK ERROR RATE TOO HIGH"); break;
        case 0x5D34: sb.Append("DATA CHANNEL IMPENDING FAILURE TOO MANY BLOCK REASSIGNS"); break;
        case 0x5D35: sb.Append("DATA CHANNEL IMPENDING FAILURE ACCESS TIMES TOO HIGH"); break;
        case 0x5D36: sb.Append("DATA CHANNEL IMPENDING FAILURE START UNIT TIMES TOO HIGH"); break;
        case 0x5D37: sb.Append("DATA CHANNEL IMPENDING FAILURE CHANNEL PARAMETRICS"); break;
        case 0x5D38: sb.Append("DATA CHANNEL IMPENDING FAILURE CONTROLLER DETECTED"); break;
        case 0x5D39: sb.Append("DATA CHANNEL IMPENDING FAILURE THROUGHPUT PERFORMANCE"); break;
        case 0x5D3A: sb.Append("DATA CHANNEL IMPENDING FAILURE SEEK TIME PERFORMANCE"); break;
        case 0x5D3B: sb.Append("DATA CHANNEL IMPENDING FAILURE SPIN-UP RETRY COUNT"); break;
        case 0x5D3C: sb.Append("DATA CHANNEL IMPENDING FAILURE DRIVE CALIBRATION RETRY COUNT"); break;
        case 0x5D40: sb.Append("SERVO IMPENDING FAILURE GENERAL HARD DRIVE FAILURE"); break;
        case 0x5D41: sb.Append("SERVO IMPENDING FAILURE DRIVE ERROR RATE TOO HIGH"); break;
        case 0x5D42: sb.Append("SERVO IMPENDING FAILURE DATA ERROR RATE TOO HIGH"); break;
        case 0x5D43: sb.Append("SERVO IMPENDING FAILURE SEEK ERROR RATE TOO HIGH"); break;
        case 0x5D44: sb.Append("SERVO IMPENDING FAILURE TOO MANY BLOCK REASSIGNS"); break;
        case 0x5D45: sb.Append("SERVO IMPENDING FAILURE ACCESS TIMES TOO HIGH"); break;
        case 0x5D46: sb.Append("SERVO IMPENDING FAILURE START UNIT TIMES TOO HIGH"); break;
        case 0x5D47: sb.Append("SERVO IMPENDING FAILURE CHANNEL PARAMETRICS"); break;
        case 0x5D48: sb.Append("SERVO IMPENDING FAILURE CONTROLLER DETECTED"); break;
        case 0x5D49: sb.Append("SERVO IMPENDING FAILURE THROUGHPUT PERFORMANCE"); break;
        case 0x5D4A: sb.Append("SERVO IMPENDING FAILURE SEEK TIME PERFORMANCE"); break;
        case 0x5D4B: sb.Append("SERVO IMPENDING FAILURE SPIN-UP RETRY COUNT"); break;
        case 0x5D4C: sb.Append("SERVO IMPENDING FAILURE DRIVE CALIBRATION RETRY COUNT"); break;
        case 0x5D50: sb.Append("SPINDLE IMPENDING FAILURE GENERAL HARD DRIVE FAILURE"); break;
        case 0x5D51: sb.Append("SPINDLE IMPENDING FAILURE DRIVE ERROR RATE TOO HIGH"); break;
        case 0x5D52: sb.Append("SPINDLE IMPENDING FAILURE DATA ERROR RATE TOO HIGH"); break;
        case 0x5D53: sb.Append("SPINDLE IMPENDING FAILURE SEEK ERROR RATE TOO HIGH"); break;
        case 0x5D54: sb.Append("SPINDLE IMPENDING FAILURE TOO MANY BLOCK REASSIGNS"); break;
        case 0x5D55: sb.Append("SPINDLE IMPENDING FAILURE ACCESS TIMES TOO HIGH"); break;
        case 0x5D56: sb.Append("SPINDLE IMPENDING FAILURE START UNIT TIMES TOO HIGH"); break;
        case 0x5D57: sb.Append("SPINDLE IMPENDING FAILURE CHANNEL PARAMETRICS"); break;
        case 0x5D58: sb.Append("SPINDLE IMPENDING FAILURE CONTROLLER DETECTED"); break;
        case 0x5D59: sb.Append("SPINDLE IMPENDING FAILURE THROUGHPUT PERFORMANCE"); break;
        case 0x5D5A: sb.Append("SPINDLE IMPENDING FAILURE SEEK TIME PERFORMANCE"); break;
        case 0x5D5B: sb.Append("SPINDLE IMPENDING FAILURE SPIN-UP RETRY COUNT"); break;
        case 0x5D5C: sb.Append("SPINDLE IMPENDING FAILURE DRIVE CALIBRATION RETRY COUNT"); break;
        case 0x5D60: sb.Append("FIRMWARE IMPENDING FAILURE GENERAL HARD DRIVE FAILURE"); break;
        case 0x5D61: sb.Append("FIRMWARE IMPENDING FAILURE DRIVE ERROR RATE TOO HIGH"); break;
        case 0x5D62: sb.Append("FIRMWARE IMPENDING FAILURE DATA ERROR RATE TOO HIGH"); break;
        case 0x5D63: sb.Append("FIRMWARE IMPENDING FAILURE SEEK ERROR RATE TOO HIGH"); break;
        case 0x5D64: sb.Append("FIRMWARE IMPENDING FAILURE TOO MANY BLOCK REASSIGNS"); break;
        case 0x5D65: sb.Append("FIRMWARE IMPENDING FAILURE ACCESS TIMES TOO HIGH"); break;
        case 0x5D66: sb.Append("FIRMWARE IMPENDING FAILURE START UNIT TIMES TOO HIGH"); break;
        case 0x5D67: sb.Append("FIRMWARE IMPENDING FAILURE CHANNEL PARAMETRICS"); break;
        case 0x5D68: sb.Append("FIRMWARE IMPENDING FAILURE CONTROLLER DETECTED"); break;
        case 0x5D69: sb.Append("FIRMWARE IMPENDING FAILURE THROUGHPUT PERFORMANCE"); break;
        case 0x5D6A: sb.Append("FIRMWARE IMPENDING FAILURE SEEK TIME PERFORMANCE"); break;
        case 0x5D6B: sb.Append("FIRMWARE IMPENDING FAILURE SPIN-UP RETRY COUNT"); break;
        case 0x5D6C: sb.Append("FIRMWARE IMPENDING FAILURE DRIVE CALIBRATION RETRY COUNT"); break;
        case 0x5DFF: sb.Append("FAILURE PREDICTION THRESHOLD EXCEEDED (FALSE)"); break;
        case 0x5E00: sb.Append("LOW POWER CONDITION ON"); break;
        case 0x5E01: sb.Append("IDLE CONDITION ACTIVATED BY TIMER"); break;
        case 0x5E02: sb.Append("STANDBY CONDITION ACTIVATED BY TIMER"); break;
        case 0x5E03: sb.Append("IDLE CONDITION ACTIVATED BY COMMAND"); break;
        case 0x5E04: sb.Append("STANDBY CONDITION ACTIVATED BY COMMAND"); break;
        case 0x5E05: sb.Append("IDLE_B CONDITION ACTIVATED BY TIMER"); break;
        case 0x5E06: sb.Append("IDLE_B CONDITION ACTIVATED BY COMMAND"); break;
        case 0x5E07: sb.Append("IDLE_C CONDITION ACTIVATED BY TIMER"); break;
        case 0x5E08: sb.Append("IDLE_C CONDITION ACTIVATED BY COMMAND"); break;
        case 0x5E09: sb.Append("STANDBY_Y CONDITION ACTIVATED BY TIMER"); break;
        case 0x5E0A: sb.Append("STANDBY_Y CONDITION ACTIVATED BY COMMAND"); break;
        case 0x5E41: sb.Append("POWER STATE CHANGE TO ACTIVE"); break;
        case 0x5E42: sb.Append("POWER STATE CHANGE TO IDLE"); break;
        case 0x5E43: sb.Append("POWER STATE CHANGE TO STANDBY"); break;
        case 0x5E45: sb.Append("POWER STATE CHANGE TO SLEEP"); break;
        case 0x5E47: sb.Append("POWER STATE CHANGE TO DEVICE CONTROL"); break;
        case 0x5F00: sb.Append("60h 00h LAMP FAILURE"); break;
        case 0x6100: sb.Append("VIDEO ACQUISITION ERROR"); break;
        case 0x6101: sb.Append("UNABLE TO ACQUIRE VIDEO"); break;
        case 0x6102: sb.Append("OUT OF FOCUS"); break;
        case 0x6200: sb.Append("SCAN HEAD POSITIONING ERROR"); break;
        case 0x6300: sb.Append("END OF USER AREA ENCOUNTERED ON THIS TRACK"); break;
        case 0x6301: sb.Append("PACKET DOES NOT FIT IN AVAILABLE SPACE"); break;
        case 0x6400: sb.Append("ILLEGAL MODE FOR THIS TRACK"); break;
        case 0x6401: sb.Append("INVALID PACKET SIZE"); break;
        case 0x6500: sb.Append("VOLTAGE FAULT"); break;
        case 0x6600: sb.Append("AUTOMATIC DOCUMENT FEEDER COVER UP"); break;
        case 0x6601: sb.Append("AUTOMATIC DOCUMENT FEEDER LIFT UP"); break;
        case 0x6602: sb.Append("DOCUMENT JAM IN AUTOMATIC DOCUMENT FEEDER"); break;
        case 0x6603: sb.Append("DOCUMENT MISS FEED AUTOMATIC IN DOCUMENT FEEDER"); break;
        case 0x6700: sb.Append("CONFIGURATION FAILURE"); break;
        case 0x6701: sb.Append("CONFIGURATION OF INCAPABLE LOGICAL UNITS FAILED"); break;
        case 0x6702: sb.Append("ADD LOGICAL UNIT FAILED"); break;
        case 0x6703: sb.Append("MODIFICATION OF LOGICAL UNIT FAILED"); break;
        case 0x6704: sb.Append("EXCHANGE OF LOGICAL UNIT FAILED"); break;
        case 0x6705: sb.Append("REMOVE OF LOGICAL UNIT FAILED"); break;
        case 0x6706: sb.Append("ATTACHMENT OF LOGICAL UNIT FAILED"); break;
        case 0x6707: sb.Append("CREATION OF LOGICAL UNIT FAILED"); break;
        case 0x6708: sb.Append("ASSIGN FAILURE OCCURRED"); break;
        case 0x6709: sb.Append("MULTIPLY ASSIGNED LOGICAL UNIT"); break;
        case 0x670A: sb.Append("SET TARGET PORT GROUPS COMMAND FAILED"); break;
        case 0x670B: sb.Append("ATA DEVICE FEATURE NOT ENABLED"); break;
        case 0x670C: sb.Append("COMMAND REJECTED"); break;
        case 0x670D: sb.Append("EXPLICIT BIND NOT ALLOWED"); break;
        case 0x6800: sb.Append("LOGICAL UNIT NOT CONFIGURED"); break;
        case 0x6801: sb.Append("SUBSIDIARY LOGICAL UNIT NOT CONFIGURED"); break;
        case 0x6900: sb.Append("DATA LOSS ON LOGICAL UNIT"); break;
        case 0x6901: sb.Append("MULTIPLE LOGICAL UNIT FAILURES"); break;
        case 0x6902: sb.Append("PARITY/DATA MISMATCH"); break;
        case 0x6A00: sb.Append("INFORMATIONAL, REFER TO LOG"); break;
        case 0x6B00: sb.Append("STATE CHANGE HAS OCCURRED"); break;
        case 0x6B01: sb.Append("REDUNDANCY LEVEL GOT BETTER"); break;
        case 0x6B02: sb.Append("REDUNDANCY LEVEL GOT WORSE"); break;
        case 0x6C00: sb.Append("REBUILD FAILURE OCCURRED"); break;
        case 0x6D00: sb.Append("RECALCULATE FAILURE OCCURRED"); break;
        case 0x6E00: sb.Append("COMMAND TO LOGICAL UNIT FAILED"); break;
        case 0x6F00: sb.Append("COPY PROTECTION KEY EXCHANGE FAILURE - AUTHENTICATION FAILURE"); break;
        case 0x6F01: sb.Append("COPY PROTECTION KEY EXCHANGE FAILURE - KEY NOT PRESENT"); break;
        case 0x6F02: sb.Append("COPY PROTECTION KEY EXCHANGE FAILURE - KEY NOT ESTABLISHED"); break;
        case 0x6F03: sb.Append("READ OF SCRAMBLED SECTOR WITHOUT AUTHENTICATION"); break;
        case 0x6F04: sb.Append("MEDIA REGION CODE IS MISMATCHED TO LOGICAL UNIT REGION"); break;
        case 0x6F05: sb.Append("DRIVE REGION MUST BE PERMANENT/REGION RESET COUNT ERROR"); break;
        case 0x6F06: sb.Append("INSUFFICIENT BLOCK COUNT FOR BINDING NONCE RECORDING"); break;
        case 0x6F07: sb.Append("CONFLICT IN BINDING NONCE RECORDING"); break;
        case 0x6F08: sb.Append("INSUFFICIENT PERMISSION"); break;
        case 0x6F09: sb.Append("INVALID DRIVE-HOST PAIRING SERVER"); break;
        case 0x6F0A: sb.Append("DRIVE-HOST PAIRING SUSPENDED"); break;
        case 0x7100: sb.Append("DECOMPRESSION EXCEPTION LONG ALGORITHM ID"); break;
        case 0x7200: sb.Append("SESSION FIXATION ERROR"); break;
        case 0x7201: sb.Append("SESSION FIXATION ERROR WRITING LEAD-IN"); break;
        case 0x7202: sb.Append("SESSION FIXATION ERROR WRITING LEAD-OUT"); break;
        case 0x7203: sb.Append("SESSION FIXATION ERROR - INCOMPLETE TRACK IN SESSION"); break;
        case 0x7204: sb.Append("EMPTY OR PARTIALLY WRITTEN RESERVED TRACK"); break;
        case 0x7205: sb.Append("NO MORE TRACK RESERVATIONS ALLOWED"); break;
        case 0x7206: sb.Append("RMZ EXTENSION IS NOT ALLOWED"); break;
        case 0x7207: sb.Append("NO MORE TEST ZONE EXTENSIONS ARE ALLOWED"); break;
        case 0x7300: sb.Append("CD CONTROL ERROR"); break;
        case 0x7301: sb.Append("POWER CALIBRATION AREA ALMOST FULL"); break;
        case 0x7302: sb.Append("POWER CALIBRATION AREA IS FULL"); break;
        case 0x7303: sb.Append("POWER CALIBRATION AREA ERROR"); break;
        case 0x7304: sb.Append("PROGRAM MEMORY AREA UPDATE FAILURE"); break;
        case 0x7305: sb.Append("PROGRAM MEMORY AREA IS FULL"); break;
        case 0x7306: sb.Append("RMA/PMA IS ALMOST FULL"); break;
        case 0x7310: sb.Append("CURRENT POWER CALIBRATION AREA ALMOST FULL"); break;
        case 0x7311: sb.Append("CURRENT POWER CALIBRATION AREA IS FULL"); break;
        case 0x7317: sb.Append("RDZ IS FULL"); break;
        case 0x7400: sb.Append("SECURITY ERROR"); break;
        case 0x7401: sb.Append("UNABLE TO DECRYPT DATA"); break;
        case 0x7402: sb.Append("UNENCRYPTED DATA ENCOUNTERED WHILE DECRYPTING"); break;
        case 0x7403: sb.Append("INCORRECT DATA ENCRYPTION KEY"); break;
        case 0x7404: sb.Append("CRYPTOGRAPHIC INTEGRITY VALIDATION FAILED"); break;
        case 0x7405: sb.Append("ERROR DECRYPTING DATA"); break;
        case 0x7406: sb.Append("UNKNOWN SIGNATURE VERIFICATION KEY"); break;
        case 0x7407: sb.Append("ENCRYPTION PARAMETERS NOT USEABLE"); break;
        case 0x7408: sb.Append("DIGITAL SIGNATURE VALIDATION FAILURE"); break;
        case 0x7409: sb.Append("ENCRYPTION MODE MISMATCH ON READ"); break;
        case 0x740A: sb.Append("ENCRYPTED BLOCK NOT RAW READ ENABLED"); break;
        case 0x740B: sb.Append("INCORRECT ENCRYPTION PARAMETERS"); break;
        case 0x740C: sb.Append("UNABLE TO DECRYPT PARAMETER LIST"); break;
        case 0x740D: sb.Append("ENCRYPTION ALGORITHM DISABLED"); break;
        case 0x7410: sb.Append("SA CREATION PARAMETER VALUE INVALID"); break;
        case 0x7411: sb.Append("SA CREATION PARAMETER VALUE REJECTED"); break;
        case 0x7412: sb.Append("INVALID SA USAGE"); break;
        case 0x7421: sb.Append("DATA ENCRYPTION CONFIGURATION PREVENTED"); break;
        case 0x7430: sb.Append("SA CREATION PARAMETER NOT SUPPORTED"); break;
        case 0x7440: sb.Append("AUTHENTICATION FAILED"); break;
        case 0x7461: sb.Append("EXTERNAL DATA ENCRYPTION KEY MANAGER ACCESS ERROR"); break;
        case 0x7462: sb.Append("EXTERNAL DATA ENCRYPTION KEY MANAGER ERROR"); break;
        case 0x7463: sb.Append("EXTERNAL DATA ENCRYPTION KEY NOT FOUND"); break;
        case 0x7464: sb.Append("EXTERNAL DATA ENCRYPTION REQUEST NOT AUTHORIZED"); break;
        case 0x746E: sb.Append("EXTERNAL DATA ENCRYPTION CONTROL TIMEOUT"); break;
        case 0x746F: sb.Append("EXTERNAL DATA ENCRYPTION CONTROL ERROR"); break;
        case 0x7471: sb.Append("LOGICAL UNIT ACCESS NOT AUTHORIZED"); break;
        case 0x7479: sb.Append("SECURITY CONFLICT IN TRANSLATED DEVICE"); break;
        // Other Values
        default:
          if (asc == 0x40)
            sb.Append($"DIAGNOSTIC FAILURE ON COMPONENT {ascq:X2}h");
          else if (asc == 0x4D)
            sb.Append($"TAGGED OVERLAPPED COMMANDS (TAG: {ascq:X2}h)");
          else if (asc == 0x70)
            sb.Append($"DECOMPRESSION EXCEPTION (SHORT ALGORITHM ID: {ascq:X2}h)");
          else if (asc >= 0x80 || ascq >= 0x80)
            sb.Append($"VENDOR-SPECIFIC (ASC: {asc:X2}h, ASCQ: {ascq:X2}h)");
          else
            sb.Append($"RESERVED (ASC: {asc:X2}h, ASCQ: {ascq:X2}h)");
          break;
      }
      return sb.ToString();
    }

  }

}

